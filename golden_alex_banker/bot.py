from datetime import datetime, time, timedelta
from aiogram.types.input_media import InputMedia, InputMediaPhoto, MediaGroup
from assets import qiwi_in,btc_check_popoln,qiwi_out,btc_check_vivod,is_digit,check_mail
import logging
from aiogram import Dispatcher, executor, types
from aiogram.dispatcher.filters import state
from aiogram.types import message
from config import cashier
import keyboards
from database import DBCommands,create_db
from config import bot
from states import QiwiIn,BtcIn,QiwiOut,EmailCheck
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from api import get_total_transactions,get_terminal_link,terminal_deposit,get_user_balance,get_terminal_transactions,agent_deposit_subagent
import time

logging.basicConfig(level=logging.INFO)


dp = Dispatcher(bot,storage=MemoryStorage())

db = DBCommands()

@dp.message_handler(commands=['user'])
async def send_welcome(message: types.Message):

    await message.answer(types.User.get_current())

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await db.add_user()
    
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup= await keyboards.start_keyboard(message))

@dp.message_handler(content_types=['text'])
async def text_keyboard(message : types.Message):
    await db.add_user()
    if message.text == "‚Ü™Ô∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞":
        photo = open("static/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.png", "rb")
        await bot.send_photo(message.chat.id, photo, caption = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=keyboards.replenishment_options())
    
    elif message.text == "‚Ü©Ô∏è –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞":
        photo = open("static/–≤—ã–≤–æ–¥.png", "rb")
        user_info = await db.get_user_info(message.chat.id)
        if user_info.email == None:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Email –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤")  
        
            await EmailCheck.email.set()
        else:
            await bot.send_photo(message.chat.id, photo ,"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞", reply_markup=keyboards.withdraw_options())
        
    elif message.text == "‚óÄÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup= await keyboards.start_keyboard(message))
        
    elif message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await db.add_user()
        user_info = await db.get_user_info(message.chat.id)
        user_login = user_info.user_login
        user_pass = user_info.user_pass
        nick = user_info.nick
        reg_date = user_info.reg_date
        reg_date = reg_date.strftime('%Y-%m-%d %H:%M')
        balance = get_user_balance(user_info.terminal_id)
        permanent_link = get_terminal_link(user_info.terminal_id)
        
        photo = open("static/–ø—Ä–æ—Ñ–∏–ª—å.png", "rb")
        await bot.send_photo(message.chat.id, photo, caption = f" –ù–∏–∫: @{nick}\n–õ–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞: {user_login}\n–ü–∞—Ä–æ–ª—å: {user_pass}\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: {permanent_link}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–ù–ï –Ω–∞–∂–∏–º–∞–π—Ç–µ CASHOUT –Ω–∞—Ö–æ–¥—è—Å—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –≤—Å–µ –≤—ã–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤ –¥–µ–ª–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞", reply_markup=keyboards.payments_check_keyboard())

    
    elif message.text == "üÜò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        media_arr = ["static/guide1.png","static/guide2.png","static/guide3.png","static/guide4.png"]
        await message.answer("–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        await bot.send_media_group(message.chat.id,[InputMediaPhoto(open(photo,'rb')) for photo in media_arr])
    
    elif message.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É":
        bill_id = await db.get_user_bill_id(message.chat.id)
        if bill_id is None:
            await message.answer("‚ùå –í—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –æ–ø–ª–∞—Ç—É!")
            return
        print(bill_id)
        bill_status = cashier.check_bill(bill_id)

        if bill_status.is_paid:
            amount = bill_status.amount.value
            user_info = await db.get_user_info(message.chat.id)
            new_balance = user_info.balance + float(amount)
            terminal_deposit(message.chat.id, new_balance)
            await db.edit_balance(message.chat.id)
            await db.create_payment(message.from_user.username, amount, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ QIWI")
            await message.answer(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount}‚ÇΩ!",
                             reply_markup= await keyboards.start_keyboard(message))
            await db.reset_bill_id(message.chat.id)

        else:
           await message.answer("–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç!‚ùå")    
    
    elif message.text == "ü§ë –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ 300 —Ä—É–±–ª–µ–π!!!":
        user_info = await db.get_user_info(message.chat.id)
    
        if user_info.is_activated_promo == False:
            amount = 300
            agent_deposit_subagent(8738,300)
            terminal_deposit(user_info.user_login,amount)
            await db.activate_promo(message.chat.id)
            await db.create_payment(message.from_user.username, amount, "–ë–æ–Ω—É—Å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
            await message.answer("–í–∞–º —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ 300 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π")
        else:
            await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å!")    
    
    elif message.text == "üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º –±–æ—Ç–µ":
        photo = open("static/–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.png", "rb")
        await bot.send_photo(message.chat.id, photo,'''–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è

üëãüèª–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ –ù–∞–∑–µ–º–Ω–æ–µ-–ö–∞–∑–∏–Ω–æ. "Golden Alex" ü•á

üÜì–ö–∞–∂–¥–æ–º—É –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –¥–∞—Ä–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ 300 —Ä—É–±.

üí•–ö–∞–∑–∏–Ω–æ-–û–¥–æ–±—Ä–µ–Ω–Ω–æ–µ —Å–≤—ã—à–µ 2 330 721  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!

üî•–ó–¥–µ—Å—å, –¢—ã –º–æ–∂–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–π—Ç–∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ @GOLDEN_ALEX_BANKER_BOT

‚ö°Ô∏è–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –Ω–∞ —É–¥–∏–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –∏–≥—Ä,—Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –Ω–∞–π–¥–µ—à—å –∫–∞–∫ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ—Ç—ã —Ç–∞–∫ –∏ –ù–æ–≤–∏–Ω–∫–∏.

üí´–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞ —Å–∞–π—Ç–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –∏–≥—Ä—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–≤ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∞–∫—Ç–∏–∫–µ!

ü§ë–ß—É–¥–µ—Å–Ω—ã–µ, –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ, —ç–º–æ—Ü–∏–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω—ã!

üí∞–î–ª—è —Ç–µ–±—è –º—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –û—Ç–ª–∏—á–Ω—ã–µ –ë–æ–Ω—É—Å—ã –∏ –ê–∫—Ü–∏–∏!! –ü–ª—é—Å –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ü–æ–¥–∞—Ä–∫–∏ –Ω–∞ –î–µ–ø–æ–∑–∏—Ç !!!''')
    
    elif message.text == "üìù –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        photo = open("static/–ø–æ–º–æ—â—å.png", "rb")
        await bot.send_photo(message.chat.id, photo, "‚Ñπ Ô∏è–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å: @ledi456 \n")
        # await message.answer("–ú—ã —Å–≤—è–∑–∞–ª–∏ –≤–∞—Å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –ø—Ä–∏—à–ª–∏—Ç–µ –µ–º—É —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        # await bot.send_message(operators_id[0], f"–í–∞–º –ø–∏—à–µ—Ç @{message.from_user.username}")
        # await SupportUser.first()
    
@dp.callback_query_handler(lambda call : call.data)
async def callback_process(call):
    data = call.data
    if data == "qiwi_replenishment":
        
        await bot.delete_message(chat_id = call.message.chat.id,message_id = call.message.message_id)
        await bot.send_message(chat_id = call.message.chat.id, text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω. 15‚ÇΩ)")  
        
        await QiwiIn.amount.set()
        
    elif data == "user_replenishment":
        
        user_replenishments_text = ""
        parent_id = 8738
        user_info = await db.get_user_info(call.message.chat.id)
        terminal_login = user_info.user_login
        replenishments_count = 5
        from_date = datetime(2021,6,10)
        to_date = from_date + timedelta(days=723)
        
        unix_from_date = time.mktime(from_date.timetuple())
        unix_to_date = time.mktime(to_date.timetuple())
        
        user_replenishments_amount = get_total_transactions(parent_id,terminal_login,unix_from_date,unix_to_date)['totalIn']
        
        all_replenishments = get_terminal_transactions(parent_id,terminal_login,replenishments_count,unix_from_date,unix_to_date)
        photo = open("static/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.png", "rb")
        if all_replenishments['list'] != None:
            for user_replenishment in all_replenishments['list']:
                if user_replenishment['isDeposit'] == True:
                    user_replenishments_text += (
                        f"üõíID —Ç—Ä–∞–Ω–∞–∑–∞–∫—Ü–∏–∏: {user_replenishment['id']}\n"
                        f"‚Ü©Ô∏è –û—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {user_replenishment['terminal']}\n"
                        f"üí≥ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {str(user_replenishment['amount'])}‚ÇΩ\n"
                        f"–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n"
                        f"–î–∞—Ç–∞: {datetime.fromtimestamp(user_replenishment['date'] / 1000)}\n"
                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    )
        else:
            user_replenishments_text = "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç—É –≤—ã–≤–æ–¥–æ–≤"
        await bot.delete_message(chat_id = call.message.chat.id,message_id = call.message.message_id)
        await bot.send_photo(call.message.chat.id, photo, caption = f"–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞ —Å—É–º–º—É: {user_replenishments_amount}\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n{user_replenishments_text}")
        
    elif data == "user_withdrawal":
        # all_withdrawals = await db.get_all_user_withdrawal(call.message.chat.id)
        
        user_withdrawal_text = ""
        parent_id = 8738
        user_info = await db.get_user_info(call.message.chat.id)
        terminal_login = user_info.user_login
        withdrawals_count = 10
        from_date = datetime(2021,6,10)
        to_date = from_date + timedelta(days=723)
        
        unix_from_date = time.mktime(from_date.timetuple())
        unix_to_date = time.mktime(to_date.timetuple())
        
        user_withdrawal_amount = get_total_transactions(parent_id,terminal_login,unix_from_date,unix_to_date)['totalOut']
        
        all_withdrawals = get_terminal_transactions(parent_id,terminal_login,withdrawals_count,unix_from_date,unix_to_date)
        
        photo = open("static/–≤—ã–≤–æ–¥—ã.png", "rb")
        if all_withdrawals['list'] != None:
            for user_withdrawal in all_withdrawals['list']:
                
                if user_withdrawal['isDeposit'] == False:
                    user_withdrawal_text += (
                        f"üõíID —Ç—Ä–∞–Ω–∞–∑–∞–∫—Ü–∏–∏: {user_withdrawal['id']}\n"
                        f"‚Ü©Ô∏è –û—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {user_withdrawal['terminal']}\n"
                        f"üí≥ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {str(user_withdrawal['amount'])}‚ÇΩ\n"
                        f"–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
                        f"–î–∞—Ç–∞: {datetime.fromtimestamp(user_withdrawal['date'] / 1000)}\n"
                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    )
        else:
            user_withdrawal_text = "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç—É –≤—ã–≤–æ–¥–æ–≤"
        
        await bot.delete_message(chat_id = call.message.chat.id,message_id = call.message.message_id)
        await bot.send_photo(call.message.chat.id,photo, f"–í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É: {user_withdrawal_amount}‚ÇΩ\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–≤–æ–¥—ã:\n{user_withdrawal_text}")
    
    # elif data == "admin_confirm_withdraw":
    #     await make_out_admin()
    
    
    elif data == "btc_replenishment":
        await bot.delete_message(chat_id = call.message.chat.id,message_id = call.message.message_id)
        await bot.send_message(call.message.chat.id,"–ü—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫... (–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä—É–±–ª–∏!!!)")  
        
        await BtcIn.check.set()

    elif data == "qiwi_withdraw":
        await bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)

        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞ (+79876543210)")

        await QiwiOut.amount.set()
        
    elif data == "btc_withdraw":
        await bot.delete_message(chat_id = call.message.chat.id,message_id = call.message.message_id,)
        #await bot.send_message(call.message.chat.id,"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 1000‚ÇΩ")  
        await btc_check_vivod(call.message)
        



@dp.message_handler(state=EmailCheck.email)
async def email_check(message: types.Message, state: FSMContext):
    email = message.text
    all_users_emails = await db.get_all_emails()
    email_tuple = (email,)
    
    await state.update_data(mail = email)
    
    sended_mail = await check_mail(message)
    
    if sended_mail == False:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π Email")
        await state.finish()
    
    elif email_tuple in all_users_emails:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await state.finish()
        

    else:
        code = sended_mail
        await state.update_data(confirm_code = code)
        await message.answer("–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ—Ç–¥–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–ø–∫—É –°–ø–∞–º")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É")
        await EmailCheck.next()


@dp.message_handler(state=EmailCheck.user_confirm_code)
async def confirm_code_check(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    code = state_data.get("confirm_code")
    email = state_data.get("mail")
    user_code = message.text
    if user_code == code:
        await db.set_user_email(message.chat.id, email) 
        await state.finish()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ Email. –ò –º–æ–∂–µ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞")
    else:
        await state.finish()
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
             
        
@dp.message_handler(state=QiwiIn.amount)
async def qiwi_in_amount(message: types.Message, state: FSMContext):
    amount = message.text
    
    await state.update_data(amount1 = amount)
    data = await state.get_data()
    #info = data.get("amount1")
    await qiwi_in(message)
    
    await state.finish()

@dp.message_handler(state=BtcIn.check)
async def btc_in_amount(message: types.Message, state: FSMContext):
    check = message.text
    
    await state.update_data(amount1 = check)
    await btc_check_popoln(message)
    
    await state.finish()    


@dp.message_handler(state=QiwiOut.amount)
async def qiwi_out_amount(message: types.Message, state: FSMContext):
    amount = message.text
    if is_digit(amount) and float(amount) < 100:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 100‚ÇΩ")
    else:    
        await state.update_data(amount1 = amount)
        await qiwi_out(message)
    
    await state.finish()


async def on_startup(dp):
    await create_db()

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)



