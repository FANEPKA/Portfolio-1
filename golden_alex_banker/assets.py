from aiogram import bot
from payments import get_pay_url
from config import bot,admins,api as qiwiapi
from keyboards import pay_url_keyboard,check_pay_markup,withdraw_admin_check
import os
from database import DBCommands
from SimpleQIWI.Errors import QIWIAPIError
from api import terminal_collect,get_user_balance,get_subagnet_balance,agent_deposit_subagent,get_terminal_bets_info

import smtplib
from email.message import EmailMessage
import string
import random
import re
from datetime import datetime,timedelta
import time


db = DBCommands()

async def qiwi_in(message):
    try:
        sum = float(message.text)
    except:
        await bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    else:
            if sum < 15:
                await bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 15‚ÇΩ")
            else:
                if sum > get_subagnet_balance(8738,1):
                    agent_deposit_subagent(8738,sum)
                invoice = get_pay_url(sum)
                pay_url = invoice[0]
                bill_id = invoice[1]
                print("Bill id" + str(bill_id))
                await db.set_bill_id(message.chat.id, bill_id)
                await bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ, –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç—É—Ç üëá",
                                reply_markup=pay_url_keyboard(pay_url))
                await bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"',
                                reply_markup=check_pay_markup())
            
async def vivod_possible_check(message):
    user_info = await db.get_user_info(message.chat.id)
    
    if user_info.is_activated_promo == True:
        user_balance = get_user_balance(user_info.terminal_id)
        user_bonus_payment = await db.get_bonus_balance(message.chat.id)    

        from_date = user_bonus_payment.payment_date
        to_date = from_date + timedelta(days=10)
            
        unix_from_date = time.mktime(from_date.timetuple())
        unix_to_date = time.mktime(to_date.timetuple())
        
        terminal_bets = get_terminal_bets_info(user_info.terminal_id,unix_from_date,unix_to_date)
        
        bets_amount = 0
        if terminal_bets['list'] == []:
            return False
        
        for terminal_bet in terminal_bets['list']:
            bets_amount += terminal_bet['bet']
                    
        if bets_amount >= user_bonus_payment.amount or user_bonus_payment == None:
            return True
        else:
            return False
        
    return True                
            
async def qiwi_out(message):
    try:
        number = message.text
    except:
        await bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥")
    else:
        user_info = await db.get_user_info(message.chat.id)
        balance = get_user_balance(user_info.terminal_id)
        if await vivod_possible_check(message) == True:
            if balance >= 15:
                try:
                    if balance >= 5000:
                        for admin in admins:
                            await bot.send_message(admin, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥\n–ù–∏–∫:@{message.from_user.username}\n–õ–æ–≥–∏–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:{message.chat.id}\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:{balance}", reply_markup=withdraw_admin_check())
                    else:        
                        qiwiapi.pay(account=number, amount=balance, comment=f'–í—ã–≤–æ–¥ –¥–ª—è @{message.from_user.username}')
                        terminal_collect(user_info.terminal_id)
                        await db.create_payment(message.from_user.username, balance, "–í—ã–≤–æ–¥ QIWI")
                        await db.edit_balance(message.chat.id)
                        await bot.send_message(message.chat.id, "–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                except QIWIAPIError as e:
                    await bot.send_message(message.chat.id, e)
            else:
                await bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 1000‚ÇΩ")
        else:
            await bot.send_message(message.chat.id, "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç—ã–≥—Ä–∞—Ç—å —Å–≤–æ–∏ –±–æ–Ω—É—Å—ã (–æ–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É –±–æ–Ω—É—Å–∞)")        

# async def make_out_admin(message):
#     qiwiapi.pay(account=number, amount=balance, comment=f'–í—ã–≤–æ–¥ –¥–ª—è @{message.from_user.username}')
#     terminal_collect(user_info.terminal_id)
#     await db.create_payment(message.from_user.username, balance, "–í—ã–≤–æ–¥ QIWI")
#     await db.edit_balance(message.chat.id)
#     await bot.send_message(message.chat.id, "–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        

async def btc_check_popoln(message):
    os.system(f"python btc.py {message.text} {message.chat.id} --in")            
    await db.edit_balance(message.chat.id)

async def btc_check_vivod(message):
    user_info = await db.get_user_info(message.chat.id)
    balance = get_user_balance(user_info.terminal_id)
    if await vivod_possible_check(message) == True:
        if balance >= 1000:
            await bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...")
            os.system(f"python btc.py {balance} {message.chat.id} --out")
            await db.edit_balance(message.chat.id)
            await db.create_payment(message.from_user.username, balance, "–í—ã–≤–æ–¥ BTC")
            terminal_collect(user_info.terminal_id)
        else:
            await bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 1000‚ÇΩ")
    else:
        await bot.send_message(message.chat.id, "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç—ã–≥—Ä–∞—Ç—å —Å–≤–æ–∏ –±–æ–Ω—É—Å—ã (–æ–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É –±–æ–Ω—É—Å–∞)")       

async def check_mail(message):
    letters = string.digits
    random_code = ''.join(random.choice(letters) for i in range(8))

    email = message.text

    sender = "GoldenAlex7777@gmail.com"
    
    adress_regex = '^(\w|\.|\_|\-)+[@](\w|\_|\-|\.)+[.]\w{2,3}$'
    if(re.search(adress_regex, email)):
        receivers = [email]
        msg = EmailMessage()

        msg["Subject"] = "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç Golden Alex Banker"
        msg["From"] = sender
        msg["To"] = receivers
        
        msg.set_content("Your code: {0}".format(random_code))

        
        try:
            smtpObj = smtplib.SMTP('smtp-relay.sendinblue.com',587)
            smtpObj.login('artem.logachov773@gmail.com','50Jna9rqQY4pL8bR')
            smtpObj.send_message(msg)         
        except smtplib.SMTPException as e:
            print ("Error: unable to send email" + str(e))
            
        return random_code
        
    else:
        return False

    
def is_digit(string):
    if string.isdigit():
        return True
    else:
        try:
            float(string)
            return True
        except ValueError:
            return False    
    